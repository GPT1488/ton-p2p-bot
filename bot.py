import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
from binance.client import Client
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫–∏
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BOT_TOKEN = "8141637379:AAEaCbFuH0PXtb8WHc4N06F1vM6h5XsJtw8"  # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –°–í–û–ô –¢–û–ö–ï–ù!

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Binance (–º–æ–∂–Ω–æ –±–µ–∑ API –∫–ª—é—á–µ–π)
client = Client()

# –°–æ–∑–¥–∞–µ–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
reply_keyboard = [
    [KeyboardButton("/menu"), KeyboardButton("/price")],
    [KeyboardButton("/convert")]
]
reply_markup_menu = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)

async def get_p2p_price_binance():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É USDT/RUB —Å P2P Binance.
    –ò—â–µ—Ç –ø–æ –≤—Å–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –º–µ—Ç–æ–¥–∞–º –æ–ø–ª–∞—Ç—ã.
    """
    try:
        # –®–∏—Ä–æ–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
        data = {
            "proMerchantAds": False,
            "page": 1,
            "rows": 20,
            "payTypes": [],  # –ò—â–µ–º –ø–æ –≤—Å–µ–º –º–µ—Ç–æ–¥–∞–º –æ–ø–ª–∞—Ç—ã
            "countries": [],
            "publisherType": None,
            "fiat": "RUB",
            "tradeType": "BUY",
            "asset": "USDT",
            "transAmount": ""
        }

        response = requests.post(
            'https://p2p.binance.com/bapi/c2c/v2/friendly/c2c/adv/search',
            headers={'Content-Type': 'application/json'},
            json=data,
            timeout=10
        )
        
        result = response.json()
        
        if not result['success'] or not result['data']:
            logger.warning("Binance P2P: no offers found")
            return None

        ads = result['data']
        prices = []

        # –°–æ–±–∏—Ä–∞–µ–º —Ü–µ–Ω—ã –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        for ad in ads:
            try:
                adv_info = ad['adv']
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ –∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –æ–±—ä–µ–º
                if (float(adv_info['surplusAmount']) > 0 and 
                    adv_info['tradeMethods'] and
                    adv_info['price']):
                    price = float(adv_info['price'])
                    prices.append(price)
            except (KeyError, ValueError):
                continue

        if prices:
            # –ë–µ—Ä–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –∏–∑ —Ç–æ–ø-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            top_prices = sorted(prices)[:5]
            average_price = sum(top_prices) / len(top_prices)
            logger.info(f"Binance P2P: found {len(prices)} offers, average price: {average_price}")
            return round(average_price, 2)
        else:
            logger.warning("Binance P2P: no valid offers found")
            return None

    except Exception as e:
        logger.error(f"Binance P2P error: {e}")
        return None

async def get_spot_price_binance():
    """
    –†–µ–∑–µ—Ä–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É USDT/RUB —Å —Å–ø–æ—Ç–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞ Binance.
    """
    try:
        ticker = client.get_symbol_ticker(symbol="USDTRUB")
        usdt_rub_price = float(ticker['price'])
        logger.info(f"Binance Spot price: {usdt_rub_price}")
        return round(usdt_rub_price, 2)
    except Exception as e:
        logger.error(f"Binance Spot error: {e}")
        return None

async def get_price_coingecko():
    """
    –ê–≤–∞—Ä–∏–π–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É USDT/RUB —Å CoinGecko.
    """
    try:
        response = requests.get(
            'https://api.coingecko.com/api/v3/simple/price?ids=tether&vs_currencies=rub',
            timeout=10
        )
        data = response.json()
        usdt_rub_price = data['tether']['rub']
        logger.info(f"CoinGecko price: {usdt_rub_price}")
        return usdt_rub_price
    except Exception as e:
        logger.error(f"CoinGecko error: {e}")
        return None

async def get_ton_price():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã TON –∫ USDT.
    """
    try:
        ticker = client.get_symbol_ticker(symbol="TONUSDT")
        ton_price = float(ticker['price'])
        logger.info(f"TON price: {ton_price}")
        return ton_price
    except Exception as e:
        logger.error(f"TON price error: {e}")
        return None

async def get_usdt_rub_price():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã USDT/RUB.
    –ü—Ä–æ–±—É–µ—Ç –≤—Å–µ –º–µ—Ç–æ–¥—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏ –¥–æ –ø–µ—Ä–≤–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ.
    """
    price = await get_p2p_price_binance()
    if price is not None:
        return price, "P2P Binance"
    
    price = await get_spot_price_binance()
    if price is not None:
        return price, "Spot Binance"
    
    price = await get_price_coingecko()
    if price is not None:
        return price, "CoinGecko"
    
    return None, "No data"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    user = update.effective_user
    
    # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    inline_keyboard = [
        [InlineKeyboardButton("üíé –£–∑–Ω–∞—Ç—å –∫—É—Ä—Å TON", callback_data='get_price')],
        [InlineKeyboardButton("üßÆ –ü–æ—Å—á–∏—Ç–∞—Ç—å", switch_inline_query_current_chat="/convert ")]
    ]
    inline_markup = InlineKeyboardMarkup(inline_keyboard)
    
    # –ö—Ä–∞—Å–∏–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = (
        f"üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!</b>\n\n"
        "üíé <b>TON Price Bot</b> –ø–æ–º–æ–∂–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å TON\n"
        "–Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö P2P-—Å–¥–µ–ª–æ–∫ –≤ —Ä—É–±–ª—è—Ö.\n\n"
        "üöÄ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>\n"
        "‚Ä¢ <b>–£–∑–Ω–∞—Ç—å –∫—É—Ä—Å</b> - —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ TON\n"
        "‚Ä¢ <b>–ü–æ—Å—á–∏—Ç–∞—Ç—å</b> - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Ä—É–±–ª–∏\n\n"
        "üìä <i>–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</i>\n\n"
        "üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º</i>"
    )
    
    await update.message.reply_text(welcome_text, reply_markup=inline_markup, parse_mode='HTML')
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
    await update.message.reply_text(
        "‚å®Ô∏è <b>–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>",
        reply_markup=reply_markup_menu,
        parse_mode='HTML'
    )

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –∏ –∫–æ–º–∞–Ω–¥–∞—Ö"""
    menu_text = (
        "üìã <b>–ú–µ–Ω—é TON Price Bot</b>\n\n"
        "üíé <b>–û –±–æ—Ç–µ:</b>\n"
        "–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä—ã–Ω–æ–∫ P2P-—Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –±–∏—Ä–∂–∞—Ö \n"
        "–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å TON –≤ —Ä—É–±–ª—è—Ö.\n\n"
        "üöÄ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ <b>/start</b> - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "‚Ä¢ <b>/menu</b> - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é\n"
        "‚Ä¢ <b>/price</b> - —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å TON\n"
        "‚Ä¢ <b>/convert</b> - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å TON –≤ —Ä—É–±–ª–∏\n\n"
        "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "<code>/convert 5.5</code> - –ø–æ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å 5.5 TON\n\n"
        "üìä <i>–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</i>"
    )
    await update.message.reply_text(menu_text, parse_mode='HTML')

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'get_price':
        await send_price_message(query.message)

async def send_price_message(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–æ–π"""
    await message.reply_chat_action(action="typing")
    
    usdt_rub_price, source = await get_usdt_rub_price()
    ton_usdt_price = await get_ton_price()

    if usdt_rub_price and ton_usdt_price:
        ton_rub_price = ton_usdt_price * usdt_rub_price
        message_text = (
            f"üíé <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å TON</b>\n\n"
            f"‚Ä¢ <b>1 TON</b> = <b>{ton_rub_price:,.2f} ‚ÇΩ</b>\n"
            f"‚Ä¢ 1 USDT = {usdt_rub_price} ‚ÇΩ ({source})\n"
            f"‚Ä¢ 1 TON = {ton_usdt_price:,.4f} $\n\n"
            f"üìä <i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {source}</i>"
        )
    else:
        message_text = "üòï –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    await message.reply_text(message_text, parse_mode='HTML')

async def price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /price"""
    await send_price_message(update.message)

async def convert(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ TON –≤ —Ä—É–±–ª–∏"""
    await update.message.reply_chat_action(action="typing")
    
    if not context.args:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É
        help_text = (
            "üßÆ <b>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è TON –≤ —Ä—É–±–ª–∏</b>\n\n"
            "üí° <i>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ TON –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã:</i>\n"
            "<code>/convert 5.5</code>\n\n"
            "üìù <i>–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ \"–ü–æ—Å—á–∏—Ç–∞—Ç—å\"</i>"
        )
        await update.message.reply_text(help_text, parse_mode='HTML')
        return

    try:
        amount = float(context.args[0])
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: <code>/convert 5.5</code>", 
            parse_mode='HTML'
        )
        return

    usdt_rub_price, source = await get_usdt_rub_price()
    ton_usdt_price = await get_ton_price()

    if usdt_rub_price and ton_usdt_price:
        result = (amount * ton_usdt_price) * usdt_rub_price
        message_text = (
            f"üßÆ <b>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è TON</b>\n\n"
            f"‚Ä¢ <b>{amount} TON</b> = <b>{result:,.2f} ‚ÇΩ</b>\n"
            f"‚Ä¢ –ö—É—Ä—Å: 1 TON = {ton_usdt_price:,.4f} $\n"
            f"‚Ä¢ –ö—É—Ä—Å: 1 USDT = {usdt_rub_price} ‚ÇΩ\n"
            f"‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: {source}"
        )
        await update.message.reply_text(message_text, parse_mode='HTML')
    else:
        error_text = "üòï –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        await update.message.reply_text(error_text)

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("menu", menu))
    application.add_handler(CommandHandler("price", price))
    application.add_handler(CommandHandler("convert", convert))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()
